// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Nosh.Data;

namespace Nosh.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Nosh.Models.Snack", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("snackCalories")
                        .HasMaxLength(4);

                    b.Property<string>("snackName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<double>("snackPrice");

                    b.Property<int>("snackTypeId");

                    b.Property<int>("vendingMachineId");

                    b.HasKey("id");

                    b.HasIndex("snackTypeId");

                    b.ToTable("Snack");

                    b.HasData(
                        new
                        {
                            id = 1,
                            snackCalories = 210,
                            snackName = "REECE's Peanut Butter Cups",
                            snackPrice = 1.0,
                            snackTypeId = 3,
                            vendingMachineId = 1
                        },
                        new
                        {
                            id = 2,
                            snackCalories = 140,
                            snackName = "Coke",
                            snackPrice = 1.0,
                            snackTypeId = 1,
                            vendingMachineId = 1
                        },
                        new
                        {
                            id = 3,
                            snackCalories = 160,
                            snackName = "Lays Original",
                            snackPrice = 0.75,
                            snackTypeId = 2,
                            vendingMachineId = 1
                        },
                        new
                        {
                            id = 4,
                            snackCalories = 240,
                            snackName = "Iced Coffee",
                            snackPrice = 3.0,
                            snackTypeId = 1,
                            vendingMachineId = 1
                        },
                        new
                        {
                            id = 5,
                            snackCalories = 160,
                            snackName = "Lays BBQ",
                            snackPrice = 0.75,
                            snackTypeId = 2,
                            vendingMachineId = 1
                        },
                        new
                        {
                            id = 6,
                            snackCalories = 215,
                            snackName = "Snickers",
                            snackPrice = 1.0,
                            snackTypeId = 3,
                            vendingMachineId = 1
                        },
                        new
                        {
                            id = 7,
                            snackCalories = 150,
                            snackName = "Dr. Pepper",
                            snackPrice = 1.0,
                            snackTypeId = 1,
                            vendingMachineId = 1
                        },
                        new
                        {
                            id = 8,
                            snackCalories = 150,
                            snackName = "Doritos Salsa Verde",
                            snackPrice = 1.0,
                            snackTypeId = 2,
                            vendingMachineId = 1
                        },
                        new
                        {
                            id = 9,
                            snackCalories = 168,
                            snackName = "Red Bull",
                            snackPrice = 2.5,
                            snackTypeId = 1,
                            vendingMachineId = 2
                        });
                });

            modelBuilder.Entity("Nosh.Models.SnackType", b =>
                {
                    b.Property<int>("SnackTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("imageURL");

                    b.Property<string>("snackTypeName");

                    b.HasKey("SnackTypeId");

                    b.ToTable("SnackType");

                    b.HasData(
                        new
                        {
                            SnackTypeId = 1,
                            imageURL = "~/images/milk-bottle.png",
                            snackTypeName = "Drink"
                        },
                        new
                        {
                            SnackTypeId = 2,
                            imageURL = "~/images/snack.png",
                            snackTypeName = "Chip"
                        },
                        new
                        {
                            SnackTypeId = 3,
                            imageURL = "~/images/chocolate-bar.png",
                            snackTypeName = "Candy"
                        });
                });

            modelBuilder.Entity("Nosh.Models.UserSnack", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("snackId");

                    b.Property<int>("userId");

                    b.Property<string>("userId1");

                    b.HasKey("id");

                    b.HasIndex("snackId");

                    b.HasIndex("userId1");

                    b.ToTable("UserSnack");

                    b.HasData(
                        new
                        {
                            id = 1,
                            snackId = 8,
                            userId = 1
                        },
                        new
                        {
                            id = 2,
                            snackId = 7,
                            userId = 1
                        },
                        new
                        {
                            id = 3,
                            snackId = 9,
                            userId = 2
                        },
                        new
                        {
                            id = 4,
                            snackId = 1,
                            userId = 3
                        },
                        new
                        {
                            id = 5,
                            snackId = 7,
                            userId = 3
                        });
                });

            modelBuilder.Entity("Nosh.Models.VendingMachine", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("vendingMachineLocation")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("vendingMachineName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("id");

                    b.ToTable("VendingMachine");

                    b.HasData(
                        new
                        {
                            id = 2,
                            vendingMachineLocation = "Closest to the coffee pot",
                            vendingMachineName = "Loud and Cold"
                        },
                        new
                        {
                            id = 1,
                            vendingMachineLocation = "Across from the microwaves",
                            vendingMachineName = "The Mothership"
                        });
                });

            modelBuilder.Entity("Nosh.Models.VendingMachineSnack", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("snackId");

                    b.Property<int>("vendingMachineId");

                    b.HasKey("id");

                    b.HasIndex("snackId");

                    b.HasIndex("vendingMachineId");

                    b.ToTable("VendingMachineSnack");

                    b.HasData(
                        new
                        {
                            id = 1,
                            snackId = 1,
                            vendingMachineId = 1
                        },
                        new
                        {
                            id = 2,
                            snackId = 2,
                            vendingMachineId = 1
                        },
                        new
                        {
                            id = 3,
                            snackId = 3,
                            vendingMachineId = 1
                        },
                        new
                        {
                            id = 4,
                            snackId = 4,
                            vendingMachineId = 1
                        },
                        new
                        {
                            id = 5,
                            snackId = 5,
                            vendingMachineId = 1
                        },
                        new
                        {
                            id = 6,
                            snackId = 6,
                            vendingMachineId = 1
                        },
                        new
                        {
                            id = 7,
                            snackId = 7,
                            vendingMachineId = 1
                        },
                        new
                        {
                            id = 8,
                            snackId = 8,
                            vendingMachineId = 1
                        },
                        new
                        {
                            id = 9,
                            snackId = 9,
                            vendingMachineId = 2
                        });
                });

            modelBuilder.Entity("Nosh.Models.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("firstName")
                        .IsRequired();

                    b.Property<bool>("isVendor");

                    b.Property<string>("lastName")
                        .IsRequired();

                    b.HasDiscriminator().HasValue("User");

                    b.HasData(
                        new
                        {
                            Id = "a8a940e5-5dcf-42dc-b68a-485f6b914841",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "93020749-2386-4988-a763-8f722abbf8dd",
                            Email = "hmetts@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "HMETTS@GMAIL.COM",
                            NormalizedUserName = "HMETTS@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEU/0MYJMWTLzpF4gqEOGJLjzXPdbI6mIjSwA8onRorwmviMYlgnWJA957htyDL+cQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "99c36618-257e-4055-917b-b47bb1ca3cc9",
                            TwoFactorEnabled = false,
                            UserName = "hmetts@gmail.com",
                            firstName = "Hunter",
                            isVendor = false,
                            lastName = "Metts"
                        },
                        new
                        {
                            Id = "ee2d76f0-9beb-48c8-a54a-40fc06098c4a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "161c752b-9b72-4c97-8e85-7a9d8f4e37c9",
                            Email = "jrosas@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JROSAS@GMAIL.COM",
                            NormalizedUserName = "JROSAS@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBZf0k+3IhPxcVO4JIVksRCSMH1ENPmBBbEWRYNYdyTacmbKbn8Q2qUYMw3amNIKvA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f5d00216-ff0c-43be-9353-9252fe64a3d1",
                            TwoFactorEnabled = false,
                            UserName = "jrosas@gmail.com",
                            firstName = "Jordan",
                            isVendor = false,
                            lastName = "Rosas"
                        },
                        new
                        {
                            Id = "4c95101a-02f4-4789-a018-4bef0d02c376",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1107393d-3bbc-45ec-9c30-1f04f30de3fa",
                            Email = "acarter@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ACARTER@GMAIL.COM",
                            NormalizedUserName = "ACARTER@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFitclZes1d9/8OTmIsN+3+ktJA08S0SMbuDFF+SSEQbT9etL4fk7LUjkhK8Fbfn9A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "226766a3-4e64-44a0-8118-94edd76b08ce",
                            TwoFactorEnabled = false,
                            UserName = "acarter@gmail.com",
                            firstName = "Asia",
                            isVendor = false,
                            lastName = "Carter"
                        },
                        new
                        {
                            Id = "742d3388-1d67-429c-82ac-e90d30646d9f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d9ce4cb0-427c-454d-8ea6-30c5d86d1869",
                            Email = "sbrader@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SBRADER@GMAIL.COM",
                            NormalizedUserName = "SBRADER@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECKvtyh+8aPoOY39mcZMwftc4MxA/veapLmVvvSGicWIcTFGvPS6hDRDnmykiTaDog==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "95afeab1-dc2c-4aba-a43f-a7946296335e",
                            TwoFactorEnabled = false,
                            UserName = "sbrader@gmail.com",
                            firstName = "Steven",
                            isVendor = true,
                            lastName = "Brader"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nosh.Models.Snack", b =>
                {
                    b.HasOne("Nosh.Models.SnackType")
                        .WithMany("Snacks")
                        .HasForeignKey("snackTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nosh.Models.UserSnack", b =>
                {
                    b.HasOne("Nosh.Models.Snack", "snack")
                        .WithMany("UserSnack")
                        .HasForeignKey("snackId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nosh.Models.User", "user")
                        .WithMany("UserSnack")
                        .HasForeignKey("userId1");
                });

            modelBuilder.Entity("Nosh.Models.VendingMachineSnack", b =>
                {
                    b.HasOne("Nosh.Models.Snack", "snack")
                        .WithMany("VendingMachineSnack")
                        .HasForeignKey("snackId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nosh.Models.VendingMachine", "VendingMachine")
                        .WithMany("VendingMachineSnack")
                        .HasForeignKey("vendingMachineId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
